/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

var mongoose = require("mongoose");
var searchTerm = require("./models/searchTerm");

mongoose.connect(process.env.MONGODB_URI || "mongodb://localhost/searchTerm");

var Bing = require("node-bing-api")({accKey :"afbf12f4258a4e21a0eb93fa6bb24192"});


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));
app.set("json spaces", 2);

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get("/api/latest/imagesearch/", function(req, res) {
  
  searchTerm.find({}, function(err, data) {
    if (err) throw err;
    
    res.json(data);
  }).sort({searchDate: -1}).limit(5);
  
});

app.get("/api/imagesearch/:values*", function(req, res) {
  var results = [];
  var values = req.params.values;
  var offset = 0;
  
  if (Number(req.query.offset)) {
    offset = req.query.offset;
  }
  
  var data = new searchTerm({  
    searchTerm : values,
    searchDate : new Date()
  });
  
  data.save(function(err) {
    if (err) {  
      throw err;
    }
  });

  Bing.images(values, {
    count: 10,   
    offset: offset
    }, function(error, response, body){
      if (error) throw error;

      for (var i = 0; i < body.value.length; i++) {
        results.push({
          title : body.value[i].name,
          imgURL : body.value[i].thumbnailUrl,
          content : body.value[i].hostPageDisplayUrl
        });
      }
    
  res.json(results);  
  });
  
});

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

